<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="General_Action" xml:space="preserve">
    <value>action</value>
  </data>
  <data name="General_Error" xml:space="preserve">
    <value>ERROR</value>
  </data>
  <data name="General_ErrorIn" xml:space="preserve">
    <value>ERROR in</value>
  </data>
  <data name="General_File" xml:space="preserve">
    <value>file</value>
  </data>
  <data name="General_Scene" xml:space="preserve">
    <value>scene</value>
  </data>
  <data name="Tools_Welcome" xml:space="preserve">
    <value>Welcome to SUPER TEXT ADVENTURE MAKER.</value>
  </data>
  <data name="UserInterface_PressEnterToContinue" xml:space="preserve">
    <value>[Press ENTER to continue.]</value>
  </data>
  <data name="UserInterface_StamPrompt" xml:space="preserve">
    <value>stam&gt;</value>
    <comment> </comment>
  </data>
  <data name="Validation_DuplicateAbbreviations" xml:space="preserve">
    <value>Duplicate abbreviations:</value>
  </data>
  <data name="Validation_DuplicateActionDescriptions" xml:space="preserve">
    <value>Duplicate descriptions:</value>
  </data>
  <data name="Validation_DuplicateSceneNames" xml:space="preserve">
    <value>Duplicate scene names:</value>
  </data>
  <data name="Validation_EntryScenes" xml:space="preserve">
    <value>Entry scenes found in:</value>
  </data>
  <data name="Validation_ErrorCannotBuild" xml:space="preserve">
    <value>Your adventure could not be built because of the above errors. Please fix them and try again.</value>
  </data>
  <data name="Validation_ErrorDefaultActionNotIsolated" xml:space="preserve">
    <value>A blank action abbreviation was found among other actions. If a blank action abbreviation is used, it must be the only action.</value>
  </data>
  <data name="Validation_ErrorDuplicateAbbreviation" xml:space="preserve">
    <value>Duplicate action abbreviations were found in the scene. Each action should have a unique abbreviation.</value>
  </data>
  <data name="Validation_ErrorDuplicateActionDescriptions" xml:space="preserve">
    <value>Duplicate action descriptions were found in the scene. Each action should have a unique description.</value>
  </data>
  <data name="Validation_ErrorDuplicateSceneNames" xml:space="preserve">
    <value>More than one scene has the same name. Each scene should have a unique name.</value>
  </data>
  <data name="Validation_ErrorInfiniteSceneLoop" xml:space="preserve">
    <value>The scene is an endless loop because all its actions use it as a next scene.</value>
  </data>
  <data name="Validation_ErrorMoreThanOneDefaultAction" xml:space="preserve">
    <value>More than one blank action abbreviation was found. If a blank action abbreviation is used, it must be the only action.</value>
  </data>
  <data name="Validation_ErrorMultipleEntryScenes" xml:space="preserve">
    <value>You have more than one entry scene. STAM doesn't know where to begin the adventure. An entry scene is a scene without a name.</value>
  </data>
  <data name="Validation_ErrorNoActionDescription" xml:space="preserve">
    <value>The action does not have a description.</value>
  </data>
  <data name="Validation_ErrorNoActionResultOrScene" xml:space="preserve">
    <value>The action does not have a result or a next scene.</value>
  </data>
  <data name="Validation_ErrorNoEntryScene" xml:space="preserve">
    <value>You haven't created any entry scenes. STAM doesn't know where to begin the adventure. An entry scene is a scene without a name.</value>
  </data>
  <data name="Validation_ErrorNonExistentScenes" xml:space="preserve">
    <value>Some of the next scenes used in actions do not exist.</value>
  </data>
  <data name="Validation_ErrorNoNextScene" xml:space="preserve">
    <value>Actions were found, but none of them has a next scene. If a scene has actions, at least one of them must have a next scene.</value>
  </data>
  <data name="Validation_ErrorNoSceneDescription" xml:space="preserve">
    <value>No scene description found.</value>
  </data>
  <data name="Validation_ScenesNotFound" xml:space="preserve">
    <value>Scenes not found:</value>
  </data>
</root>